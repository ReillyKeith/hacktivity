# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestHackCheck():
  def setup_method(self, method):
    self.driver = webdriver.Chrome(executable_path='/Users/keithreilly/Documents/GitHub/hacktivity/collectData')
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_hackCheck(self):
    # Test name: HackCheck
    # Step # | name | target | value



    #Add a loop here to read from a file of know reports 


    #Now grab the data that is needed from the report 

        # Open the file with read only permit
    f = open('rawDataReports')
    # use readline() to read the first line 
    line = f.readline()
    # use the read line to read further.
    # If the file is not empty keep reading one line
    # at a time, till the file is empty
    while line:
        # in python 2+
        # print line
        # in python 3 print is a builtin function, so
        print(line)
        # use realine() to read next line
        line = f.readline()
    f.close()


    # 1 | open | /reports/727 | 
    self.driver.get("https://hackerone.com/reports/727")
    # 2 | setWindowSize | 1789x1119 | 
    self.driver.set_window_size(1789, 1119)
    # 3 | click | linkText=#727 | 
    self.driver.find_element(By.LINK_TEXT, "#727").click()
  
